{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/News.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","views/Home/components/EarnAPRCard.tsx","views/Home/components/EarnAssetCard.tsx","views/Home/Home.tsx","hooks/useTokenBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","../node_modules/lodash/max.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","Block","styled","div","CakeHarvestBalance","t","useTranslation","earningsSum","reduce","accum","earning","earningNumber","eq","DEFAULT_TOKEN_DECIMAL","toNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","CardValue","lineHeight","gt","CardBusdValue","color","style","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","busdBalance","getBalanceNumber","decimals","fontSize","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","masterChefContract","useMasterchef","balancesWithValue","filter","balanceType","harvestAllFarms","useCallback","farmWithBalance","harvest","scale","mb","src","alt","width","height","id","disabled","onClick","count","UnlockButton","StyledCakeStats","Row","Heading","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","eggPrice","circSupply","minus","cakeSupply","marketCap","times","prefix","contrast","href","StyledTotalValueLockedCard","TotalValueLockedCard","data","setData","fetch","response","json","responseData","console","error","fetchData","useGetStats","tvl","toLocaleString","maximumFractionDigits","RainbowLight","keyframes","mediaQueries","lg","CardMidContent","attrs","EarnAPRCard","isFetchingFarmData","setIsFetchingFarmData","farmsLP","useFarms","cakePrice","dispatch","useAppDispatch","fetchFarmsPublicDataAsync","nonArchivedFarms","nonArchivedFarm","fetchFarmData","highestApr","useMemo","aprs","multiplier","lpTotalInQuoteToken","quoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","maxApr","max","aprText","split","earnUpTo","InFarms","exact","activeClassName","to","animation","variant","justifyContent","mt","activeNonCakePools","pools","pool","isFinished","earningToken","symbol","includes","assets","orderBy","slice","join","EarnAssetCard","earn","InPools","Hero","Cards","BaseLayout","sm","CTACards","Home","Page","as","FarmStakingCard","News","FetchStatus","slowRefresh","setTotalSupply","cakeContract","getCakeContract","methods","call","supply","fetchTotalSupply","tokenAddress","BIG_ZERO","web3","useWeb3","contract","getBep20Contract","balanceOf","fetchBalance","useGetBnbBalance","useLastUpdated","lastUpdated","setLastUpdated","eth","getBalance","walletBalance","refresh","NOT_FETCHED","SUCCESS","FAILED","fetchStatus","balanceState","setBalanceState","prev","bold","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","props","baseExtremum","require","baseGt","identity","module","exports","array"],"mappings":"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","file":"static/js/9.63e983fc.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\nconst CakeHarvestBalance = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    const earningNumber = new BigNumber(earning)\n    if (earningNumber.eq(0)) {\n      return accum\n    }\n    return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\n  }, 0)\n  const cakePriceBusd = usePriceCakeBusd()\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\n      {cakePriceBusd.gt(0) && <CardBusdValue value={earningsBusd} />}\n    </Block>\n  )\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { BigNumber } from 'bignumber.js'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst CakeWalletBalance = () => {\n  const { t } = useTranslation()\n  const { balance: cakeBalance } = useTokenBalance(getCakeAddress())\n  const cakePriceBusd = usePriceCakeBusd()\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <>\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\n      {cakePriceBusd.gt(0) ? <CardBusdValue value={busdBalance} /> : <br />}\n    </>\n  )\n}\n\nexport default CakeWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap/uikit'\nimport { harvest } from 'utils/callHelpers'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport { useMasterchef } from 'hooks/useContract'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n background-position: center;\nbackground-repeat: no-repeat;\nbackground-size: cover;\n  min-height: 376px;\n   opacity: 0.9;\n    ) ;\n\n `\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 10px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 17px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const farmsWithBalance = useFarmsWithBalance()\n  const masterChefContract = useMasterchef()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    // eslint-disable-next-line no-restricted-syntax\n    for (const farmWithBalance of balancesWithValue) {\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        await harvest(masterChefContract, farmWithBalance.pid, account)\n      } catch (error) {\n        // TODO: find a way to handle when the user rejects transaction or it fails\n      }\n    }\n    setPendingTx(false)\n  }, [account, balancesWithValue, masterChefContract])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"15px\" color=\"secondary\">\n          {t('Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/zeus.svg\" alt=\"zeus logo\" width={64} height={64} />\n        <Block>\n          <Label>{t('Zeus to Harvest')}:</Label>\n          <CakeHarvestBalance />\n        </Block>\n        <Block>\n          <Label>{t('Zeus in Wallet')}:</Label>\n          <CakeWalletBalance />\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              width=\"100%\"\n            >\n              {pendingTx\n                ? t('Collecting Zeus')\n                : t('Harvest all (%count%)', {\n                    count: balancesWithValue.length,\n                  })}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Text } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport { useGetStats } from 'hooks/api'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useI18n from 'hooks/useI18n'\nimport { useTranslation } from 'contexts/Localization'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useLpTokenPrice, usePriceCakeBusd } from 'state/hooks'\nimport CardValue from './CardValue'\n\n \n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  opacity: 0.9;\n  max-height: 100%;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n const Heading = styled.div`\n font-size: 40px;\n margin-bottom: 20px;\n color: ${({ theme }) => theme.colors.textSubtle};\n font-weight: 900;\n  `\nconst CakeStats = () => {\n  const { t } = useTranslation()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n   const eggPrice = usePriceCakeBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = eggPrice.times(circSupply);\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading>\n                  {t('Zeus Stats')}\n\n        </Heading>\n        <Row>\n          <Text fontSize=\"17px\" color='secondary'>{t(' ZEUS circ. market cap')}</Text>\n          <CardValue fontSize=\"17px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"17px\" color='secondary'>{t('ZEUS total supply')}</Text>\n          {totalSupply && <CardValue fontSize=\"17px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"17px\" color='secondary'>{t('ZEUS in circulation')}</Text>\n          {cakeSupply && <CardValue fontSize=\"17px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"17px\" color='secondary'>{t('ZEUS total burned')}</Text>\n          <CardValue fontSize=\"17px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n        <Text fontSize=\"17px\" color='secondary'>{t('ZEUS/block')}</Text>\n          <CardValue fontSize=\"17px\" decimals={0} value={0} />\n        </Row>\n        <Row>\n        <Text fontSize=\"17px\" color='secondary'>{t('ACTIVE POOLS')}</Text>\n          <CardValue fontSize=\"17px\" decimals={0} value={0} />\n        </Row>\n\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport { Card, CardBody, Text } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport { useGetStats } from 'hooks/api'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useI18n from 'hooks/useI18n'\nimport { useTranslation } from 'contexts/Localization'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useLpTokenPrice, usePriceCakeBusd } from 'state/hooks'\n \n\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  opacity: 0.9;\n  max-height: 100%;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  font-size: 40px;\n  overflow: scroll;\n  max-width: 100%;\n height: 340px;\n color: ${({ theme }) => theme.colors.textSubtle};\n font-weight: 900;\n  margin-bottom: 8px;\n`\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.contrast};\n  font-size: 14px;\n  text-align: right;\n`\n const Heading = styled.div`\n font-size: 40px;\n margin-bottom: 20px;\n max-width: 100%;\n height: 100%;\n overflow: scroll;\n color: ${({ theme }) => theme.colors.textSubtle};\n font-weight: 900;\n  `\nconst CakeStats = () => {\n  const { t } = useTranslation()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n   const eggPrice = usePriceCakeBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = eggPrice.times(circSupply);\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Row>\n                  {t('News')}  \n                  <a href=\"https://twitter.com/ZeusTokenTeam\"> <img src=\"/images/new1.png\" alt=\"zeus\" height=\"auto\" width=\"100%\" /></a>\n                  <Label>{t('March 20, 2021')}</Label>\n        <img src=\"/images/banner.png\" alt=\"zeus\" height=\"auto\" width=\"100%\" />\n        <Label>{t('March 18, 2021')}</Label>\n\n\n\n        </Row>\n\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useGetStats } from 'hooks/api'\n\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  flex: 1; \n  opacity: 0.9;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  height: 100%;\n      `\n  \nconst TotalValueLockedCard = () => {\n  const { t } = useTranslation()\n  const data = useGetStats()\n  const tvl = data ? data.tvl.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading scale=\"lg\" mb=\"0px\" color=\"secondary\">\n          {t('Total Value Locked (TVL)')}\n        </Heading>\n        {data ? (\n          <>\n            <Heading scale=\"xl\">{`$${tvl}`}</Heading>\n            <Text color=\"textSubtle\">{t('Across all LPs and Zeus Pool')}</Text>\n          </>\n        ) : (\n          <Skeleton height={66} />\n        )}\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import { useEffect, useState } from 'react'\n\n/* eslint-disable camelcase */\nexport interface DeBankTvlResponse {\n  id : string  \n  chain : string  \n  name : string  \n  logo_url : string  \n  site_url : string  \n  has_supported_portfolio : boolean  \n  tvl : number\n}\n\nexport const useGetStats = () => {\n  const [data, setData] = useState<DeBankTvlResponse | null>(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://openapi.debank.com/v1/protocol?id=zeusswap')\n        \n        const responseData: DeBankTvlResponse = await response.json()\n\n        setData(responseData)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data \n}\n","import React, { useEffect, useMemo, useState } from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap/uikit'\nimport max from 'lodash/max'\nimport { NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { useFarms, usePriceCakeBusd } from 'state/hooks'\nimport { fetchFarmsPublicDataAsync, nonArchivedFarms } from 'state/farms'\nimport { getFarmApr } from 'utils/apr'\n\nconst RainbowLight = keyframes`\n\t0% {\n\t\tbackground-position: 0% 100%;\n\t}\n\t50% {\n\t\tbackground-position: 0% 0%;\n\t}\n\t100% {\n\t\tbackground-position: 100% 0%;\n\t}\n`\n\nconst StyledFarmStakingCard = styled(Card)`\nbackground: linear-gradient(\n  45deg,\n  rgb(0,0,0) 0%,\n  rgb(0,0,0) 10%,\n  rgb(0, 16, 36)20%,\n  rgb(0, 21, 46) 30%,\n  rgb(0, 32, 71) 40%,\n  rgb(0, 53, 117) 50%,\n  rgb(0, 32, 71)60%,\n  rgb(0, 21, 46) 70%,\n  rgb(0, 16, 36) 80%,\n  rgb(0,0,0) 90%,\n  rgb(0,0,0) 100%);\n  );\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  background-size: 500% 500%;\n  animation: ${RainbowLight} 2.5s linear infinite;\n  border-radius: 25px;\n  opacity: 0.94;\n  \n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPRCard = () => {\n  const [isFetchingFarmData, setIsFetchingFarmData] = useState(true)\n  const { t } = useTranslation()\n  const { data: farmsLP } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n\n  // Fetch farm data once to get the max APR\n  useEffect(() => {\n    const fetchFarmData = async () => {\n      try {\n        await dispatch(fetchFarmsPublicDataAsync(nonArchivedFarms.map((nonArchivedFarm) => nonArchivedFarm.pid)))\n      } finally {\n        setIsFetchingFarmData(false)\n      }\n    }\n\n    fetchFarmData()\n  }, [dispatch, setIsFetchingFarmData])\n\n  const highestApr = useMemo(() => {\n    if (cakePrice.gt(0)) {\n      const aprs = farmsLP.map((farm) => {\n        // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\n        if (farm.pid !== 0 && farm.multiplier !== '0X' && farm.lpTotalInQuoteToken && farm.quoteToken.busdPrice) {\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n          return getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity)\n        }\n        return null\n      })\n\n      const maxApr = max(aprs)\n      return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\n    }\n    return null\n  }, [cakePrice, farmsLP])\n\n  const aprText = highestApr || '-'\n  const earnAprText = t('Earn up to %highestApr% APR in Farms', { highestApr: aprText })\n  const [earnUpTo, InFarms] = earnAprText.split(aprText)\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\n        <CardBody>\n          <Heading color=\"secondary\" scale=\"lg\">\n            {earnUpTo}\n          </Heading>\n          <CardMidContent color=\"text\">\n            {highestApr && !isFetchingFarmData ? (\n              `${highestApr}%`\n            ) : (\n              <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n            )}\n          </CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"secondary\" scale=\"lg\">\n              {InFarms}\n            </Heading>\n            <ArrowForwardIcon mt={30} color=\"secondary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPRCard\n","import React from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport orderBy from 'lodash/orderBy'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { NavLink } from 'react-router-dom'\nimport pools from 'config/constants/pools'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\n\nconst RainbowLight = keyframes`\n\t0% {\n\t\tbackground-position: 0% 100%;\n\t}\n\t50% {\n\t\tbackground-position: 0% 0%;\n\t}\n\t100% {\n\t\tbackground-position: 100% 0%;\n\t}\n`\n\nconst StyledFarmStakingCard = styled(Card)`\nbackground: linear-gradient(\n  45deg,\n  rgb(0,0,0) 0%,\n  rgb(0,0,0) 10%,\n  rgb(0, 16, 36)20%,\n  rgb(0, 21, 46) 30%,\n  rgb(0, 32, 71) 40%,\n  rgb(0, 53, 117) 50%,\n  rgb(0, 32, 71)60%,\n  rgb(0, 21, 46) 70%,\n  rgb(0, 16, 36) 80%,\n  rgb(0,0,0) 90%,\n  rgb(0,0,0) 100%);\n  );\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  background-size: 500% 500%;\n  animation: ${RainbowLight} 2.5s linear infinite;\n  border-radius: 25px;\n  opacity: 0.94;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 44px;\n`\n\nconst activeNonCakePools = pools.filter((pool) => !pool.isFinished && !pool.earningToken.symbol.includes('CAKE'))\nconst latestPools: Pool[] = orderBy(activeNonCakePools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\n// Always include CAKE\nconst assets = [latestPools.map((pool) => pool.earningToken.symbol)].join(', ')\n\nconst EarnAssetCard = () => {\n  const { t } = useTranslation()\n  const assetText = t('Earn %assets% in Pools', { assets })\n  const [earn, InPools] = assetText.split(assets)\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/syrup\" id=\"pool-cta\">\n        <CardBody>\n          <Heading color=\"secondary\" scale=\"lg\">\n            {earn}\n          </Heading>\n          <CardMidContent color=\"text\">{assets}</CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"secondary\" scale=\"lg\">\n              {InPools}\n            </Heading>\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAssetCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\nimport LotteryCard from 'views/Home/components/LotteryCard'\nimport CakeStats from 'views/Home/components/CakeStats'\nimport News from  'views/Home/components/News'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport EarnAPRCard from 'views/Home/components/EarnAPRCard'\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\nimport WinCard from 'views/Home/components/WinCard'\n \nconst Hero = styled.div`\n  align-items: center;\n   background-repeat: no-repeat;\n  background-position: top center;\n  background-image: url('images/banner.png');\n  background-size: 100% 100%;\n  opacity: 0.9;\n  border-radius: 25px;\n   display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 24px;\n  margin-top: 0px;\n  padding-top: 140px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n     background-position: left center, right center;\n    height: 380px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 24px;\n  grid-gap: 24px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 32px;\n    grid-gap: 32px;\n\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 24px;\n  grid-gap: 24px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 32px;\n    grid-gap: 32px;\n\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" scale=\"xl\" mb=\"24px\" color=\"secondary\">\n          {t('')}\n        </Heading>\n        <Text>{t('')}</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <News />\n         </Cards>\n    \n         <Cards>\n         <CakeStats />\n         <TotalValueLockedCard />\n         </Cards>\n         <CTACards>\n          <EarnAPRCard />\n          <EarnAssetCard />\n         </CTACards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const web3 = useWeb3()\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      try {\n        const res = await contract.methods.balanceOf(account).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap/uikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '40px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'text',\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport CardValue, { CardValueProps } from './CardValue'\n\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\n  )\n}\n\nexport default CardBusdValue\n","var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    identity = require('./identity');\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n"],"sourceRoot":""}